#!/usr/bin/python
import sys
import swsssdk
import redis
import time
import syslog
import argparse
from multiprocessing import Pool


def print_examples():
    print("""
'Usage: sonic-db-cli [PING | <db_name> <cmd> [arg [arg ...]]]'
Example 1: sonic-db-cli CONFIG_DB keys *
Example 2: sonic-db-cli APPL_DB HGETALL VLAN_TABLE:Vlan10
Example 3: sonic-db-cli APPL_DB HGET VLAN_TABLE:Vlan10 mtu
Example 4: sonic-db-cli APPL_DB EVAL "return {KEYS[1],KEYS[2],ARGV[1],ARGV[2]}" 2 k1 k2 v1 v2
Example 5: sonic-db-cli PING
""")

def ping_single_instance(inst_info):
    inst_hostname = inst_info['hostname']
    inst_port = inst_info['port']
    r = redis.Redis(host=inst_hostname, port=inst_port)
    rsp = False
    while not rsp:
        try:
            rsp = r.ping()
        except redis.exceptions.ConnectionError as e:
            syslog.syslog(syslog.LOG_ERR, 'ping redis inst failed at host {} port {}'.format(inst_hostname, inst_port))
            time.sleep(1)

def ping_all_instances():
    db_insts = swsssdk.SonicDBConfig.get_instancelist()
    # ping all redis instances one by one
    p = Pool(len(db_insts.keys()))
    p.map(ping_single_instance, [v for k, v in db_insts.items()])

def execute_cmd(dbname, cmd):
    dbconn = swsssdk.SonicV2Connector(use_unix_socket_path=False)
    try:
        dbconn.connect(dbname)
    except RuntimeError:
        msg = "Invalid database name input : '{}'".format(dbname)
        print >> sys.stderr, msg
    else:
        client = dbconn.get_redis_client(dbname)
        resp = client.execute_command(*cmd)
        """
        sonic-db-cli output format mimic the non-tty mode output format from redis-cli
        based on our usage in SONiC, None and list type output from python API needs to be modified
        with these changes, it is enough for us to mimic redis-cli in SONiC so far since no application uses tty mode redis-cli output
        """
        if resp is None:
            print ""
        elif isinstance(resp, list):
            print "\n".join(resp)
        else:
            print resp

def main():
    parser = argparse.ArgumentParser(description='SONiC DB CLI',
                         formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('db_or_op', nargs='?', type=str, help='Database name Or Unary operation')
    parser.add_argument('cmd', nargs='*', type=str, help='Command to execute in database')

    args = parser.parse_args()

    if args.db_or_op:
        if args.cmd:
            execute_cmd(args.db_or_op, args.cmd)
        elif args.db_or_op == 'PING':
            ping_all_instances()
#       TODO next PR will support 'SAVE' and 'FLUSHALL'
#       elif args.db_or_op == 'SAVE':
#       elif args.db_or_op == 'FLUSHALL':
        else:
            parser.print_help()
            print_examples()
    else:
        parser.print_help()
        print_examples()

if __name__ == "__main__":
    main()
